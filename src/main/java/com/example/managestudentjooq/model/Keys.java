/*
 * This file is generated by jOOQ.
 */
package com.example.managestudentjooq.model;


import com.example.managestudentjooq.model.tables.Account;
import com.example.managestudentjooq.model.tables.Role;
import com.example.managestudentjooq.model.tables.StudentSubject;
import com.example.managestudentjooq.model.tables.Students;
import com.example.managestudentjooq.model.tables.Subjects;
import com.example.managestudentjooq.model.tables.records.AccountRecord;
import com.example.managestudentjooq.model.tables.records.RoleRecord;
import com.example.managestudentjooq.model.tables.records.StudentSubjectRecord;
import com.example.managestudentjooq.model.tables.records.StudentsRecord;
import com.example.managestudentjooq.model.tables.records.SubjectsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * manage_students.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_PRIMARY"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_USERNAME_UNIQUE = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_username_UNIQUE"), new TableField[] { Account.ACCOUNT.USERNAME }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_PRIMARY"), new TableField[] { Role.ROLE.ID }, true);
    public static final UniqueKey<StudentSubjectRecord> KEY_STUDENT_SUBJECT_PRIMARY = Internal.createUniqueKey(StudentSubject.STUDENT_SUBJECT, DSL.name("KEY_student_subject_PRIMARY"), new TableField[] { StudentSubject.STUDENT_SUBJECT.ID }, true);
    public static final UniqueKey<StudentsRecord> KEY_STUDENTS_PRIMARY = Internal.createUniqueKey(Students.STUDENTS, DSL.name("KEY_students_PRIMARY"), new TableField[] { Students.STUDENTS.ID }, true);
    public static final UniqueKey<SubjectsRecord> KEY_SUBJECTS_PRIMARY = Internal.createUniqueKey(Subjects.SUBJECTS, DSL.name("KEY_subjects_PRIMARY"), new TableField[] { Subjects.SUBJECTS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, RoleRecord> ACCOUNT_IBFK_1 = Internal.createForeignKey(Account.ACCOUNT, DSL.name("account_ibfk_1"), new TableField[] { Account.ACCOUNT.ROLE_ID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ID }, true);
    public static final ForeignKey<StudentSubjectRecord, StudentsRecord> STUDENT_SUBJECT_IBFK_1 = Internal.createForeignKey(StudentSubject.STUDENT_SUBJECT, DSL.name("student_subject_ibfk_1"), new TableField[] { StudentSubject.STUDENT_SUBJECT.STUDENT_ID }, Keys.KEY_STUDENTS_PRIMARY, new TableField[] { Students.STUDENTS.ID }, true);
    public static final ForeignKey<StudentSubjectRecord, SubjectsRecord> STUDENT_SUBJECT_IBFK_2 = Internal.createForeignKey(StudentSubject.STUDENT_SUBJECT, DSL.name("student_subject_ibfk_2"), new TableField[] { StudentSubject.STUDENT_SUBJECT.SUBJECT_ID }, Keys.KEY_SUBJECTS_PRIMARY, new TableField[] { Subjects.SUBJECTS.ID }, true);
}
