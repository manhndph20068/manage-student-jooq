/*
 * This file is generated by jOOQ.
 */
package com.example.managestudentjooq.model.tables.records;


import com.example.managestudentjooq.model.tables.Account;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record7<Integer, String, String, LocalDateTime, LocalDateTime, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>manage_students.account.id</code>.
     */
    public AccountRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.account.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>manage_students.account.username</code>.
     */
    public AccountRecord setUsername(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.account.username</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>manage_students.account.password</code>.
     */
    public AccountRecord setPassword(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.account.password</code>.
     */
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>manage_students.account.create_at</code>.
     */
    public AccountRecord setCreateAt(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.account.create_at</code>.
     */
    public LocalDateTime getCreateAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>manage_students.account.updated_at</code>.
     */
    public AccountRecord setUpdatedAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.account.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>manage_students.account.status</code>.
     */
    public AccountRecord setStatus(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.account.status</code>.
     */
    public Integer getStatus() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>manage_students.account.role_id</code>.
     */
    public AccountRecord setRoleId(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.account.role_id</code>.
     */
    public Integer getRoleId() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, LocalDateTime, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, LocalDateTime, LocalDateTime, Integer, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.USERNAME;
    }

    @Override
    public Field<String> field3() {
        return Account.ACCOUNT.PASSWORD;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Account.ACCOUNT.CREATE_AT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Account.ACCOUNT.UPDATED_AT;
    }

    @Override
    public Field<Integer> field6() {
        return Account.ACCOUNT.STATUS;
    }

    @Override
    public Field<Integer> field7() {
        return Account.ACCOUNT.ROLE_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public LocalDateTime component4() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdatedAt();
    }

    @Override
    public Integer component6() {
        return getStatus();
    }

    @Override
    public Integer component7() {
        return getRoleId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public LocalDateTime value4() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdatedAt();
    }

    @Override
    public Integer value6() {
        return getStatus();
    }

    @Override
    public Integer value7() {
        return getRoleId();
    }

    @Override
    public AccountRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public AccountRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public AccountRecord value4(LocalDateTime value) {
        setCreateAt(value);
        return this;
    }

    @Override
    public AccountRecord value5(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public AccountRecord value6(Integer value) {
        setStatus(value);
        return this;
    }

    @Override
    public AccountRecord value7(Integer value) {
        setRoleId(value);
        return this;
    }

    @Override
    public AccountRecord values(Integer value1, String value2, String value3, LocalDateTime value4, LocalDateTime value5, Integer value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(Integer id, String username, String password, LocalDateTime createAt, LocalDateTime updatedAt, Integer status, Integer roleId) {
        super(Account.ACCOUNT);

        setId(id);
        setUsername(username);
        setPassword(password);
        setCreateAt(createAt);
        setUpdatedAt(updatedAt);
        setStatus(status);
        setRoleId(roleId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(com.example.managestudentjooq.model.tables.pojos.Account value) {
        super(Account.ACCOUNT);

        if (value != null) {
            setId(value.getId());
            setUsername(value.getUsername());
            setPassword(value.getPassword());
            setCreateAt(value.getCreateAt());
            setUpdatedAt(value.getUpdatedAt());
            setStatus(value.getStatus());
            setRoleId(value.getRoleId());
            resetChangedOnNotNull();
        }
    }
}
