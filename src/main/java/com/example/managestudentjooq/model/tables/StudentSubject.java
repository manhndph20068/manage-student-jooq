/*
 * This file is generated by jOOQ.
 */
package com.example.managestudentjooq.model.tables;


import com.example.managestudentjooq.model.Indexes;
import com.example.managestudentjooq.model.Keys;
import com.example.managestudentjooq.model.ManageStudents;
import com.example.managestudentjooq.model.tables.records.StudentSubjectRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentSubject extends TableImpl<StudentSubjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manage_students.student_subject</code>
     */
    public static final StudentSubject STUDENT_SUBJECT = new StudentSubject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentSubjectRecord> getRecordType() {
        return StudentSubjectRecord.class;
    }

    /**
     * The column <code>manage_students.student_subject.id</code>.
     */
    public final TableField<StudentSubjectRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>manage_students.student_subject.student_id</code>.
     */
    public final TableField<StudentSubjectRecord, Integer> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>manage_students.student_subject.subject_id</code>.
     */
    public final TableField<StudentSubjectRecord, Integer> SUBJECT_ID = createField(DSL.name("subject_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>manage_students.student_subject.status</code>.
     */
    public final TableField<StudentSubjectRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    private StudentSubject(Name alias, Table<StudentSubjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentSubject(Name alias, Table<StudentSubjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manage_students.student_subject</code> table
     * reference
     */
    public StudentSubject(String alias) {
        this(DSL.name(alias), STUDENT_SUBJECT);
    }

    /**
     * Create an aliased <code>manage_students.student_subject</code> table
     * reference
     */
    public StudentSubject(Name alias) {
        this(alias, STUDENT_SUBJECT);
    }

    /**
     * Create a <code>manage_students.student_subject</code> table reference
     */
    public StudentSubject() {
        this(DSL.name("student_subject"), null);
    }

    public <O extends Record> StudentSubject(Table<O> child, ForeignKey<O, StudentSubjectRecord> key) {
        super(child, key, STUDENT_SUBJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManageStudents.MANAGE_STUDENTS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STUDENT_SUBJECT_STUDENT_ID, Indexes.STUDENT_SUBJECT_SUBJECT_ID);
    }

    @Override
    public Identity<StudentSubjectRecord, Integer> getIdentity() {
        return (Identity<StudentSubjectRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StudentSubjectRecord> getPrimaryKey() {
        return Keys.KEY_STUDENT_SUBJECT_PRIMARY;
    }

    @Override
    public List<ForeignKey<StudentSubjectRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_SUBJECT_IBFK_1, Keys.STUDENT_SUBJECT_IBFK_2);
    }

    private transient Students _students;
    private transient Subjects _subjects;

    /**
     * Get the implicit join path to the <code>manage_students.students</code>
     * table.
     */
    public Students students() {
        if (_students == null)
            _students = new Students(this, Keys.STUDENT_SUBJECT_IBFK_1);

        return _students;
    }

    /**
     * Get the implicit join path to the <code>manage_students.subjects</code>
     * table.
     */
    public Subjects subjects() {
        if (_subjects == null)
            _subjects = new Subjects(this, Keys.STUDENT_SUBJECT_IBFK_2);

        return _subjects;
    }

    @Override
    public StudentSubject as(String alias) {
        return new StudentSubject(DSL.name(alias), this);
    }

    @Override
    public StudentSubject as(Name alias) {
        return new StudentSubject(alias, this);
    }

    @Override
    public StudentSubject as(Table<?> alias) {
        return new StudentSubject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentSubject rename(String name) {
        return new StudentSubject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentSubject rename(Name name) {
        return new StudentSubject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentSubject rename(Table<?> name) {
        return new StudentSubject(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
