/*
 * This file is generated by jOOQ.
 */
package com.example.managestudentjooq.model.tables;


import com.example.managestudentjooq.model.Keys;
import com.example.managestudentjooq.model.ManageStudents;
import com.example.managestudentjooq.model.tables.records.SubjectsRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subjects extends TableImpl<SubjectsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>manage_students.subjects</code>
     */
    public static final Subjects SUBJECTS = new Subjects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubjectsRecord> getRecordType() {
        return SubjectsRecord.class;
    }

    /**
     * The column <code>manage_students.subjects.id</code>.
     */
    public final TableField<SubjectsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>manage_students.subjects.name</code>.
     */
    public final TableField<SubjectsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>manage_students.subjects.description</code>.
     */
    public final TableField<SubjectsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>manage_students.subjects.create_at</code>.
     */
    public final TableField<SubjectsRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>manage_students.subjects.updated_at</code>.
     */
    public final TableField<SubjectsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>manage_students.subjects.status</code>.
     */
    public final TableField<SubjectsRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    private Subjects(Name alias, Table<SubjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Subjects(Name alias, Table<SubjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>manage_students.subjects</code> table reference
     */
    public Subjects(String alias) {
        this(DSL.name(alias), SUBJECTS);
    }

    /**
     * Create an aliased <code>manage_students.subjects</code> table reference
     */
    public Subjects(Name alias) {
        this(alias, SUBJECTS);
    }

    /**
     * Create a <code>manage_students.subjects</code> table reference
     */
    public Subjects() {
        this(DSL.name("subjects"), null);
    }

    public <O extends Record> Subjects(Table<O> child, ForeignKey<O, SubjectsRecord> key) {
        super(child, key, SUBJECTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ManageStudents.MANAGE_STUDENTS;
    }

    @Override
    public Identity<SubjectsRecord, Integer> getIdentity() {
        return (Identity<SubjectsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubjectsRecord> getPrimaryKey() {
        return Keys.KEY_SUBJECTS_PRIMARY;
    }

    @Override
    public Subjects as(String alias) {
        return new Subjects(DSL.name(alias), this);
    }

    @Override
    public Subjects as(Name alias) {
        return new Subjects(alias, this);
    }

    @Override
    public Subjects as(Table<?> alias) {
        return new Subjects(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subjects rename(String name) {
        return new Subjects(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subjects rename(Name name) {
        return new Subjects(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subjects rename(Table<?> name) {
        return new Subjects(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
