/*
 * This file is generated by jOOQ.
 */
package com.example.managestudentjooq.model.tables.records;


import com.example.managestudentjooq.model.tables.Students;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentsRecord extends UpdatableRecordImpl<StudentsRecord> implements Record7<Integer, String, Integer, Integer, LocalDateTime, LocalDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>manage_students.students.id</code>.
     */
    public StudentsRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.students.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>manage_students.students.full_name</code>.
     */
    public StudentsRecord setFullName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.students.full_name</code>.
     */
    public String getFullName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>manage_students.students.age</code>.
     */
    public StudentsRecord setAge(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.students.age</code>.
     */
    public Integer getAge() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>manage_students.students.gender</code>.
     */
    public StudentsRecord setGender(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.students.gender</code>.
     */
    public Integer getGender() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>manage_students.students.create_at</code>.
     */
    public StudentsRecord setCreateAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.students.create_at</code>.
     */
    public LocalDateTime getCreateAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>manage_students.students.updated_at</code>.
     */
    public StudentsRecord setUpdatedAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.students.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>manage_students.students.status</code>.
     */
    public StudentsRecord setStatus(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>manage_students.students.status</code>.
     */
    public Integer getStatus() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Integer, Integer, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, Integer, Integer, LocalDateTime, LocalDateTime, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Students.STUDENTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Students.STUDENTS.FULL_NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Students.STUDENTS.AGE;
    }

    @Override
    public Field<Integer> field4() {
        return Students.STUDENTS.GENDER;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Students.STUDENTS.CREATE_AT;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Students.STUDENTS.UPDATED_AT;
    }

    @Override
    public Field<Integer> field7() {
        return Students.STUDENTS.STATUS;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFullName();
    }

    @Override
    public Integer component3() {
        return getAge();
    }

    @Override
    public Integer component4() {
        return getGender();
    }

    @Override
    public LocalDateTime component5() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime component6() {
        return getUpdatedAt();
    }

    @Override
    public Integer component7() {
        return getStatus();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFullName();
    }

    @Override
    public Integer value3() {
        return getAge();
    }

    @Override
    public Integer value4() {
        return getGender();
    }

    @Override
    public LocalDateTime value5() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime value6() {
        return getUpdatedAt();
    }

    @Override
    public Integer value7() {
        return getStatus();
    }

    @Override
    public StudentsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public StudentsRecord value2(String value) {
        setFullName(value);
        return this;
    }

    @Override
    public StudentsRecord value3(Integer value) {
        setAge(value);
        return this;
    }

    @Override
    public StudentsRecord value4(Integer value) {
        setGender(value);
        return this;
    }

    @Override
    public StudentsRecord value5(LocalDateTime value) {
        setCreateAt(value);
        return this;
    }

    @Override
    public StudentsRecord value6(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public StudentsRecord value7(Integer value) {
        setStatus(value);
        return this;
    }

    @Override
    public StudentsRecord values(Integer value1, String value2, Integer value3, Integer value4, LocalDateTime value5, LocalDateTime value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StudentsRecord
     */
    public StudentsRecord() {
        super(Students.STUDENTS);
    }

    /**
     * Create a detached, initialised StudentsRecord
     */
    public StudentsRecord(Integer id, String fullName, Integer age, Integer gender, LocalDateTime createAt, LocalDateTime updatedAt, Integer status) {
        super(Students.STUDENTS);

        setId(id);
        setFullName(fullName);
        setAge(age);
        setGender(gender);
        setCreateAt(createAt);
        setUpdatedAt(updatedAt);
        setStatus(status);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StudentsRecord
     */
    public StudentsRecord(com.example.managestudentjooq.model.tables.pojos.Students value) {
        super(Students.STUDENTS);

        if (value != null) {
            setId(value.getId());
            setFullName(value.getFullName());
            setAge(value.getAge());
            setGender(value.getGender());
            setCreateAt(value.getCreateAt());
            setUpdatedAt(value.getUpdatedAt());
            setStatus(value.getStatus());
            resetChangedOnNotNull();
        }
    }
}
